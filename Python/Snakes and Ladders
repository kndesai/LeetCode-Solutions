class Solution(object):
    def snakesAndLadders(self, board):
        """
        :type board: List[List[int]]
        :rtype: int
        """
        n = len(board)
        target = n * n
        
        def get_coordinates(num):
            row = (num - 1) // n
            col = (num - 1) % n
            if row % 2 == 1:
                col = n - col - 1
            return n - 1 - row, col
        
        def get_next_moves(curr):
            row, col = get_coordinates(curr)
            moves = []
            for i in range(1, 7):
                next_square = curr + i
                if next_square > target:
                    break
                row_next, col_next = get_coordinates(next_square)
                if board[row_next][col_next] != -1:
                    next_square = board[row_next][col_next]
                moves.append(next_square)
            return moves
        
        visited = set()
        queue = deque([(1, 0)])  # (square, moves)
        
        while queue:
            curr_square, moves = queue.popleft()
            if curr_square == target:
                return moves
            for next_square in get_next_moves(curr_square):
                if next_square not in visited:
                    visited.add(next_square)
                    queue.append((next_square, moves + 1))
        
        return -1
