class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        if not board or not board[0]:
            return

        rows, cols = len(board), len(board[0])

        def dfs(row, col):
            if row < 0 or col < 0 or row >= rows or col >= cols or board[row][col] != 'O':
                return
            board[row][col] = 'T'  # Mark the current 'O' as temporarily visited

            # Explore neighboring 'O' cells
            dfs(row + 1, col)
            dfs(row - 1, col)
            dfs(row, col + 1)
            dfs(row, col - 1)

        # Mark 'O' cells on the border and their connected regions as temporarily visited
        for i in range(rows):
            dfs(i, 0)
            dfs(i, cols - 1)

        for j in range(cols):
            dfs(0, j)
            dfs(rows - 1, j)

        # Capture the remaining 'O' cells by flipping them to 'X' and revert temporarily visited 'T' cells to 'O'
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                elif board[i][j] == 'T':
                    board[i][j] = 'O'
