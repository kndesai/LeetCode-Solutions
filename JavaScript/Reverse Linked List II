/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} left
 * @param {number} right
 * @return {ListNode}
 */
var reverseBetween = function(head, left, right) {
    const dummy = new ListNode(0);
    dummy.next = head;

    let pre = dummy;
    for (let i = 0; i < left - 1; i++) {
        pre = pre.next;
    }
    let start = pre.next;
    let end = start;

    for (let i = 0; i < right - left; i++) {
        end = end.next;
    }

    let post = end.next;

    pre.next = null;
    end.next = null;
    reverseList(start);

    pre.next = end;
    start.next = post;

    return dummy.next;
};

/**
 * Helper function to reverse a linked list
 * @param {ListNode} head
 * @returns {ListNode}
 */
var reverseList = function(head) {
    let prev = null;
    let current = head;

    while (current) {
        const nextNode = current.next;
        current.next = prev;
        prev = current;
        current = nextNode;
    }

    return prev
};
