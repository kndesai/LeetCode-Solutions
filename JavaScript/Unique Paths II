/**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */
var uniquePathsWithObstacles = function(obstacleGrid) {
    const m = obstacleGrid.length;
    const n = obstacleGrid[0].length;
    
    // Initialize dp grid with the same dimensions as the original grid
    const dp = new Array(m).fill().map(() => new Array(n).fill(0));
    
    // Initialize the first cell in dp grid
    dp[0][0] = obstacleGrid[0][0] === 0 ? 1 : 0;
    
    // Fill the first row of dp grid
    for (let j = 1; j < n; j++) {
        if (obstacleGrid[0][j] === 0 && dp[0][j - 1] === 1) {
            dp[0][j] = 1;
        }
    }
    
    // Fill the first column of dp grid
    for (let i = 1; i < m; i++) {
        if (obstacleGrid[i][0] === 0 && dp[i - 1][0] === 1) {
            dp[i][0] = 1;
        }
    }
    
    // Fill the rest of the dp grid
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            if (obstacleGrid[i][j] === 0) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
    }
    
    // The bottom-right cell of dp grid will have the number of unique paths
    return dp[m - 1][n - 1];
};
