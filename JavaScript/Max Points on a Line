/**
 * @param {number[][]} points
 * @return {number}
 */
var maxPoints = function(points) {
    if (points.length <= 2) return points.length;

    let maxPointsOnLine = 0;

    for (let i = 0; i < points.length; i++) {
        const slopes = {};
        let samePoints = 1; // Count the current point itself

        for (let j = i + 1; j < points.length; j++) {
            let deltaX = points[j][0] - points[i][0];
            let deltaY = points[j][1] - points[i][1];

            if (deltaX === 0 && deltaY === 0) {
                samePoints++;
                continue; // Same point, skip
            }

            let gcdValue = gcd(deltaX, deltaY);
            deltaX /= gcdValue;
            deltaY /= gcdValue;

            const slope = `${deltaY}/${deltaX}`;

            slopes[slope] = (slopes[slope] || 0) + 1;
        }

        maxPointsOnLine = Math.max(maxPointsOnLine, samePoints);

        for (const slope in slopes) {
            maxPointsOnLine = Math.max(maxPointsOnLine, slopes[slope] + samePoints);
        }
    }

    return maxPointsOnLine;
};

function gcd(a, b) {
    if (b === 0) return a;
    return gcd(b, a % b);
};
